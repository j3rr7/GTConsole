#pragma once
// Generated using AI , why ? why not :v
#include <unordered_map>
#include <string>

inline int StringToVirtualKeyCode(const std::string& str)
{
	if (str == "VK_LBUTTON") return VK_LBUTTON;
	if (str == "VK_RBUTTON") return VK_RBUTTON;
	if (str == "VK_CANCEL") return VK_CANCEL;
	if (str == "VK_MBUTTON") return VK_MBUTTON;
	if (str == "VK_XBUTTON1") return VK_XBUTTON1;
	if (str == "VK_XBUTTON2") return VK_XBUTTON2;
	if (str == "VK_BACK") return VK_BACK;
	if (str == "VK_TAB") return VK_TAB;
	if (str == "VK_CLEAR") return VK_CLEAR;
	if (str == "VK_RETURN") return VK_RETURN;
	if (str == "VK_SHIFT") return VK_SHIFT;
	if (str == "VK_CONTROL") return VK_CONTROL;
	if (str == "VK_MENU") return VK_MENU;
	if (str == "VK_PAUSE") return VK_PAUSE;
	if (str == "VK_CAPITAL") return VK_CAPITAL;
	if (str == "VK_KANA") return VK_KANA;
	if (str == "VK_HANGEUL") return VK_HANGEUL;
	if (str == "VK_HANGUL") return VK_HANGUL;
	if (str == "VK_JUNJA") return VK_JUNJA;
	if (str == "VK_FINAL") return VK_FINAL;
	if (str == "VK_HANJA") return VK_HANJA;
	if (str == "VK_KANJI") return VK_KANJI;
	if (str == "VK_ESCAPE") return VK_ESCAPE;
	if (str == "VK_CONVERT") return VK_CONVERT;
	if (str == "VK_NONCONVERT") return VK_NONCONVERT;
	if (str == "VK_ACCEPT") return VK_ACCEPT;
	if (str == "VK_MODECHANGE") return VK_MODECHANGE;
	if (str == "VK_SPACE") return VK_SPACE;
	if (str == "VK_PRIOR") return VK_PRIOR;
	if (str == "VK_NEXT") return VK_NEXT;
	if (str == "VK_END") return VK_END;
	if (str == "VK_HOME") return VK_HOME;
	if (str == "VK_LEFT") return VK_LEFT;
	if (str == "VK_UP") return VK_UP;
	if (str == "VK_RIGHT") return VK_RIGHT;
	if (str == "VK_DOWN") return VK_DOWN;
	if (str == "VK_SELECT") return VK_SELECT;
	if (str == "VK_PRINT") return VK_PRINT;
	if (str == "VK_EXECUTE") return VK_EXECUTE;
	if (str == "VK_SNAPSHOT") return VK_SNAPSHOT;
	if (str == "VK_INSERT") return VK_INSERT;
	if (str == "VK_DELETE") return VK_DELETE;
	if (str == "VK_HELP") return VK_HELP;
	if (str == "VK_LWIN") return VK_LWIN;
	if (str == "VK_RWIN") return VK_RWIN;
	if (str == "VK_APPS") return VK_APPS;
	if (str == "VK_SLEEP") return VK_SLEEP;
	if (str == "VK_NUMPAD0") return VK_NUMPAD0;
	if (str == "VK_NUMPAD1") return VK_NUMPAD1;
	if (str == "VK_NUMPAD2") return VK_NUMPAD2;
	if (str == "VK_NUMPAD3") return VK_NUMPAD3;
	if (str == "VK_NUMPAD4") return VK_NUMPAD4;
	if (str == "VK_NUMPAD5") return VK_NUMPAD5;
	if (str == "VK_NUMPAD6") return VK_NUMPAD6;
	if (str == "VK_NUMPAD7") return VK_NUMPAD7;
	if (str == "VK_NUMPAD8") return VK_NUMPAD8;
	if (str == "VK_NUMPAD9") return VK_NUMPAD9;
	if (str == "VK_MULTIPLY") return VK_MULTIPLY;
	if (str == "VK_ADD") return VK_ADD;
	if (str == "VK_SEPARATOR") return VK_SEPARATOR;
	if (str == "VK_SUBTRACT") return VK_SUBTRACT;
	if (str == "VK_DECIMAL") return VK_DECIMAL;
	if (str == "VK_DIVIDE") return VK_DIVIDE;
	if (str == "VK_F1") return VK_F1;
	if (str == "VK_F2") return VK_F2;
	if (str == "VK_F3") return VK_F3;
	if (str == "VK_F4") return VK_F4;
	if (str == "VK_F5") return VK_F5;
	if (str == "VK_F6") return VK_F6;
	if (str == "VK_F7") return VK_F7;
	if (str == "VK_F8") return VK_F8;
	if (str == "VK_F9") return VK_F9;
	if (str == "VK_F10") return VK_F10;
	if (str == "VK_F11") return VK_F11;
	if (str == "VK_F12") return VK_F12;
	if (str == "VK_F13") return VK_F13;
	if (str == "VK_F14") return VK_F14;
	if (str == "VK_F15") return VK_F15;
	if (str == "VK_F16") return VK_F16;
	if (str == "VK_F17") return VK_F17;
	if (str == "VK_F18") return VK_F18;
	if (str == "VK_F19") return VK_F19;
	if (str == "VK_F20") return VK_F20;
	if (str == "VK_F21") return VK_F21;
	if (str == "VK_F22") return VK_F22;
	if (str == "VK_F23") return VK_F23;
	if (str == "VK_F24") return VK_F24;
	if (str == "VK_NUMLOCK") return VK_NUMLOCK;
	if (str == "VK_SCROLL") return VK_SCROLL;
	if (str == "VK_OEM_NEC_EQUAL") return VK_OEM_NEC_EQUAL;
	if (str == "VK_OEM_FJ_JISHO") return VK_OEM_FJ_JISHO;
	if (str == "VK_OEM_FJ_MASSHOU") return VK_OEM_FJ_MASSHOU;
	if (str == "VK_OEM_FJ_TOUROKU") return VK_OEM_FJ_TOUROKU;
	if (str == "VK_OEM_FJ_LOYA") return VK_OEM_FJ_LOYA;
	if (str == "VK_OEM_FJ_ROYA") return VK_OEM_FJ_ROYA;
	if (str == "VK_LSHIFT") return VK_LSHIFT;
	if (str == "VK_RSHIFT") return VK_RSHIFT;
	if (str == "VK_LCONTROL") return VK_LCONTROL;
	if (str == "VK_RCONTROL") return VK_RCONTROL;
	if (str == "VK_LMENU") return VK_LMENU;
	if (str == "VK_RMENU") return VK_RMENU;
	if (str == "VK_BROWSER_BACK") return VK_BROWSER_BACK;
	if (str == "VK_BROWSER_FORWARD") return VK_BROWSER_FORWARD;
	if (str == "VK_BROWSER_REFRESH") return VK_BROWSER_REFRESH;
	if (str == "VK_BROWSER_STOP") return VK_BROWSER_STOP;
	if (str == "VK_BROWSER_SEARCH") return VK_BROWSER_SEARCH;
	if (str == "VK_BROWSER_FAVORITES") return VK_BROWSER_FAVORITES;
	if (str == "VK_BROWSER_HOME") return VK_BROWSER_HOME;
	if (str == "VK_VOLUME_MUTE") return VK_VOLUME_MUTE;
	if (str == "VK_VOLUME_DOWN") return VK_VOLUME_DOWN;
	if (str == "VK_VOLUME_UP") return VK_VOLUME_UP;
	if (str == "VK_MEDIA_NEXT_TRACK") return VK_MEDIA_NEXT_TRACK;
	if (str == "VK_MEDIA_PREV_TRACK") return VK_MEDIA_PREV_TRACK;
	if (str == "VK_MEDIA_STOP") return VK_MEDIA_STOP;
	if (str == "VK_MEDIA_PLAY_PAUSE") return VK_MEDIA_PLAY_PAUSE;
	if (str == "VK_LAUNCH_MAIL") return VK_LAUNCH_MAIL;
	if (str == "VK_LAUNCH_MEDIA_SELECT") return VK_LAUNCH_MEDIA_SELECT;
	if (str == "VK_LAUNCH_APP1") return VK_LAUNCH_APP1;
	if (str == "VK_LAUNCH_APP2") return VK_LAUNCH_APP2;
	if (str == "VK_OEM_1") return VK_OEM_1;
	if (str == "VK_OEM_PLUS") return VK_OEM_PLUS;
	if (str == "VK_OEM_COMMA") return VK_OEM_COMMA;
	if (str == "VK_OEM_MINUS") return VK_OEM_MINUS;
	if (str == "VK_OEM_PERIOD") return VK_OEM_PERIOD;
	if (str == "VK_OEM_2") return VK_OEM_2;
	if (str == "VK_OEM_3") return VK_OEM_3;
	if (str == "VK_OEM_4") return VK_OEM_4;
	if (str == "VK_OEM_5") return VK_OEM_5;
	if (str == "VK_OEM_6") return VK_OEM_6;
	if (str == "VK_OEM_7") return VK_OEM_7;
	if (str == "VK_OEM_8") return VK_OEM_8;
	if (str == "VK_OEM_AX") return VK_OEM_AX;
	if (str == "VK_OEM_102") return VK_OEM_102;
	if (str == "VK_ICO_HELP") return VK_ICO_HELP;
	if (str == "VK_ICO_00") return VK_ICO_00;
	if (str == "VK_PROCESSKEY") return VK_PROCESSKEY;
	if (str == "VK_ICO_CLEAR") return VK_ICO_CLEAR;
	if (str == "VK_PACKET") return VK_PACKET;
	if (str == "VK_OEM_RESET") return VK_OEM_RESET;
	if (str == "VK_OEM_JUMP") return VK_OEM_JUMP;
	throw std::exception("Key not found");
}